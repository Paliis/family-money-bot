from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import base64
from collections import defaultdict

# --- –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ---
CATEGORY_MAP = {
    "–ø—Ä–æ–¥—É–∫—Ç–∏": [],
    "–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ —Ç–æ–≤–∞—Ä–∏": [],
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏": [],
    "–∫—ñ–Ω–æ": [],
    "–∫–∞–≤'—è—Ä–Ω—è": [],
    "–∞–≤—Ç–æ": ["–∑–∞–ø—Ä–∞–≤–∫–∞", "—Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "–º–∏–π–∫–∞", "—Å—Ç–æ—è–Ω–∫–∞", "–ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è", "–∫—Ä–µ–¥–∏—Ç", "—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"],
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": [],
    "–∫—Ä–∞—Å–∞": [],
    "–æ–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": [],
    "–∫–æ–º—É–Ω–∞–ª–∫–∞, –º–æ–±—ñ–ª—å–Ω–∏–π, —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç": [],
    "–¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —Å–≤—è—Ç–∞": [],
    "–∑–¥–æ—Ä–æ–≤'—è": ["–±–∞–¥–∏", "–ª—ñ–∫–∞—Ä—ñ", "–ª—ñ–∫–∏", "–ø—Å–∏—Ö–æ–ª–æ–≥", "–º–∞—Å–∞–∂"],
    "—Å—Ç—Ä—ñ–ª—å–±–∞": ["–ø–∞—Ç—Ä–æ–Ω–∏", "–≤–Ω–µ—Å–∫–∏", "–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏"],
    "–Ω–∞–≤—á–∞–Ω–Ω—è": ["—à–∫–æ–ª–∞", "–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞", "—ñ–Ω—Å—Ç–∏—Ç—É—Ç", "—ñ–Ω—à–µ"],
    "—Ç–∞–∫—Å—ñ": [],
    "–¥–æ–Ω–∞—Ç–∏": [],
    "–∫–≤—ñ—Ç–∏": [],
    "–±–∞—Ç—å–∫–∞–º": [],
    "—Ç–µ—Ö–Ω—ñ–∫–∞": [],
    "–ø—Ä–∏—Ö—ñ–¥": []
}

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
google_creds_raw = base64.b64decode(os.environ["GOOGLE_CREDS_B64"]).decode("utf-8")
google_creds = json.loads(google_creds_raw)
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(os.environ["SPREADSHEET_ID"]).sheet1

pending_state = {}  # user_id: {step, amount, category}
report_state = {}   # user_id: waiting_for_report_range

# --- –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏—Ç—Ä–∞—Ç ---
def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    text = update.message.text.strip().lower()

    # --- –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–≤—ñ—Ç—É ---
    if report_state.get(user_id) == "waiting_for_period":
        del report_state[user_id]
        if text == "–∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è":
            start = datetime.now().replace(day=1)
            end = datetime.now()
            return send_report(update, start, end)
        elif text == "–≤—ñ–¥ –∑–ø":
            update.message.reply_text("üîú –ö–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
            return
        elif text.startswith("–≤—ñ–¥ "):
            try:
                date_str = text.replace("–≤—ñ–¥ ", "")
                start = datetime.strptime(date_str, "%Y-%m-%d")
                end = datetime.now()
                return send_report(update, start, end)
            except:
                update.message.reply_text("üìÖ –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –§–æ—Ä–º–∞—Ç: –≤—ñ–¥ 2025-04-01")
                return

    state = pending_state.get(user_id, {})

    if state.get("step") == "await_category":
        category = text
        if category not in CATEGORY_MAP:
            keyboard = [[c] for c in CATEGORY_MAP.keys()]
            update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
            return
        if CATEGORY_MAP[category]:
            pending_state[user_id] = {"step": "await_subcategory", "amount": state["amount"], "category": category}
            subcat_keyboard = [[s] for s in CATEGORY_MAP[category]]
            update.message.reply_text(f"'{category}' –º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –û–±–µ—Ä–∏ –æ–¥–Ω—É:", reply_markup=ReplyKeyboardMarkup(subcat_keyboard, one_time_keyboard=True, resize_keyboard=True))
            return

        amount = float(state["amount"])
        if category != "–ø—Ä–∏—Ö—ñ–¥":
            amount *= -1  # –≤–∏—Ç—Ä–∞—Ç–∞

        sheet.append_row([datetime.now().strftime("%Y-%m-%d %H:%M"), user_name, amount, category, ""])
        update.message.reply_text(f"üìÇ {abs(amount)} –≥—Ä–Ω –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '{category}'")
        pending_state.pop(user_id)
        return

    if state.get("step") == "await_subcategory":
        amount = float(state["amount"])
        if state["category"] != "–ø—Ä–∏—Ö—ñ–¥":
            amount *= -1

        sheet.append_row([datetime.now().strftime("%Y-%m-%d %H:%M"), user_name, amount, state["category"], text])
        update.message.reply_text(f"üìÇ {abs(amount)} –≥—Ä–Ω –∑–∞–ø–∏—Å–∞–Ω–æ –≤ '{state['category']} > {text}'")
        pending_state.pop(user_id)
        return

    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ ‚Äî —á–µ–∫–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
    if text.replace(".", "", 1).isdigit():
        pending_state[user_id] = {"step": "await_category", "amount": text}
        keyboard = [[c] for c in CATEGORY_MAP.keys()]
        update.message.reply_text("–û–∫–µ–π, —Ç–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
        return

    update.message.reply_text("üß† –ù–∞–ø–∏—à–∏ —Å—É–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '1000'")

# --- –ö–æ–º–∞–Ω–¥–∞ /report ---
def report_command(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    report_state[user_id] = "waiting_for_period"
    keyboard = [["–ó –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è"], ["–í—ñ–¥ –ó–ü"], ["–í—ñ–¥ 2025-04-01"]]
    update.message.reply_text("üìÖ –û–±–µ—Ä–∏ –ø–µ—Ä—ñ–æ–¥ –∑–≤—ñ—Ç—É:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))

# --- –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É ---
def send_report(update, start_date, end_date):
    rows = sheet.get_all_values()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    summary = defaultdict(float)
    total = 0

    for row in rows:
        if len(row) < 5:
            continue
        try:
            timestamp = datetime.strptime(row[0], "%Y-%m-%d %H:%M")
        except ValueError:
            continue

        if not (start_date <= timestamp <= end_date):
            continue

        user, amount, category, subcat = row[1], row[2], row[3], row[4]
        try:
            amount_val = float(amount)
        except ValueError:
            continue

        key = f"{category} > {subcat}" if subcat else category
        summary[key] += amount_val
        total += amount_val

    if not summary:
        update.message.reply_text("–ó–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç", reply_markup=ReplyKeyboardRemove())
        return

    lines = [f"üìä –ó–≤—ñ—Ç –∑ {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}", f"–ó–∞–≥–∞–ª–æ–º: {total:.2f} –≥—Ä–Ω"]
    for cat, amt in sorted(summary.items(), key=lambda x: -x[1]):
        lines.append(f"‚Ä¢ {cat}: {amt:.2f} –≥—Ä–Ω")

    update.message.reply_text("\n".join(lines), reply_markup=ReplyKeyboardRemove())

# --- –ó–∞–ø—É—Å–∫ ---
updater = Updater(os.environ["BOT_TOKEN"], use_context=True)
dp = updater.dispatcher
dp.add_handler(CommandHandler("report", report_command))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
updater.start_polling()
print("‚úÖ FamilyMoneyBot –ø—Ä–∞—Ü—é—î")
updater.idle()
