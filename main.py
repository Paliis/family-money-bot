from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext, CommandHandler
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
import base64

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
CATEGORY_MAP = {
    "–ø—Ä–æ–¥—É–∫—Ç–∏": [],
    "–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ —Ç–æ–≤–∞—Ä–∏": [],
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏": [],
    "–∫—ñ–Ω–æ": [],
    "–∫–∞–≤'—è—Ä–Ω—è": [],
    "–∞–≤—Ç–æ": ["–∑–∞–ø—Ä–∞–≤–∫–∞", "—Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "–º–∏–π–∫–∞", "—Å—Ç–æ—è–Ω–∫–∞", "–ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è", "–∫—Ä–µ–¥–∏—Ç", "—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"],
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": [],
    "–∫—Ä–∞—Å–∞": [],
    "–æ–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": [],
    "–∫–æ–º—É–Ω–∞–ª–∫–∞, –º–æ–±—ñ–ª—å–Ω–∏–π, —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç": [],
    "–¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —Å–≤—è—Ç–∞": [],
    "–∑–¥–æ—Ä–æ–≤'—è": ["–±–∞–¥–∏", "–ª—ñ–∫–∞—Ä—ñ", "–ª—ñ–∫–∏", "–ø—Å–∏—Ö–æ–ª–æ–≥", "–º–∞—Å–∞–∂"],
    "—Å—Ç—Ä—ñ–ª—å–±–∞": ["–ø–∞—Ç—Ä–æ–Ω–∏", "–≤–Ω–µ—Å–∫–∏", "–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏"],
    "–Ω–∞–≤—á–∞–Ω–Ω—è": ["—à–∫–æ–ª–∞", "–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞", "—ñ–Ω—Å—Ç–∏—Ç—É—Ç", "—ñ–Ω—à–µ"],
    "—Ç–∞–∫—Å—ñ": [],
    "–¥–æ–Ω–∞—Ç–∏": [],
    "–∫–≤—ñ—Ç–∏": [],
    "–±–∞—Ç—å–∫–∞–º": [],
    "—Ç–µ—Ö–Ω—ñ–∫–∞": [],
    "–ø—Ä–∏—Ö—ñ–¥": []
}

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
google_creds_raw = base64.b64decode(os.environ["GOOGLE_CREDS_B64"]).decode("utf-8")
google_creds = json.loads(google_creds_raw)
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(os.environ["SPREADSHEET_ID"]).sheet1
limits_sheet = client.open_by_key(os.environ["SPREADSHEET_ID"]).worksheet("–õ—ñ–º—ñ—Ç–∏")

pending_state = {}  # user_id: {step, amount, category}
report_state = {}   # user_id: waiting_for_report_range

def get_spent_in_category_this_month(category):
    rows = sheet.get_all_values()[1:]
    total = 0
    for row in rows:
        if len(row) < 4 or row[3] != category:
            continue
        try:
            dt = datetime.strptime(row[0], "%Y-%m-%d %H:%M")
            if dt < datetime.now().replace(day=1):
                continue
            val = float(row[2])
            if val < 0:
                total += abs(val)
        except:
            continue
    return total

def send_report(update, start, end):
    rows = sheet.get_all_values()[1:]
    totals = {}
    incoming = 0
    for row in rows:
        try:
            dt = datetime.strptime(row[0], "%Y-%m-%d %H:%M")
            if not (start <= dt <= end):
                continue
            amount = float(row[2])
            category = row[3]
            subcat = row[4] if len(row) > 4 else ""

            if category == "–ø—Ä–∏—Ö—ñ–¥":
                incoming += amount
                continue

            key = (category, subcat)
            totals[key] = totals.get(key, 0) + amount
        except:
            continue

    result = f"üìä –ó–≤—ñ—Ç –∑ {start.strftime('%Y-%m-%d')} –ø–æ {end.strftime('%Y-%m-%d')}\n"
    result += f"\nüí∞ –ü—Ä–∏—Ö—ñ–¥: *{incoming:.2f} –≥—Ä–Ω*\n"
    categories = {}
    for (cat, subcat), amount in totals.items():
        categories.setdefault(cat, []).append((subcat, amount))

    for cat, items in sorted(categories.items(), key=lambda i: sum(x[1] for x in i[1]), reverse=True):
        total = sum(x[1] for x in items)
        result += f"\n*{cat}*: {abs(total):.2f} –≥—Ä–Ω\n"
        for subcat, amount in items:
            if subcat:
                result += f"  - {subcat}: {abs(amount):.2f} –≥—Ä–Ω\n"

    result += f"\nüìâ –ë–∞–ª–∞–Ω—Å: *{incoming + sum(sum(x[1] for x in v) for v in categories.values()):.2f} –≥—Ä–Ω*"
    update.message.reply_text(result, parse_mode="Markdown")

def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    text = update.message.text.strip().lower()

    if report_state.get(user_id) == "waiting_for_period":
        del report_state[user_id]
        if text == "–∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è":
            start = datetime.now().replace(day=1)
            return send_report(update, start, datetime.now())
        elif text == "–≤—ñ–¥ –∑–ø":
            update.message.reply_text("üîú –ö–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
            return
        elif text.startswith("–≤—ñ–¥ "):
            try:
                start = datetime.strptime(text.replace("–≤—ñ–¥ ", ""), "%Y-%m-%d")
                return send_report(update, start, datetime.now())
            except:
                update.message.reply_text("üìÖ –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –§–æ—Ä–º–∞—Ç: –≤—ñ–¥ 2025-04-01")
                return

    state = pending_state.get(user_id, {})

    if state.get("step") == "await_category":
        category = text
        if category not in CATEGORY_MAP:
            keyboard = [[c] for c in CATEGORY_MAP]
            update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
            return
        if CATEGORY_MAP[category]:
            pending_state[user_id] = {"step": "await_subcategory", "amount": state["amount"], "category": category}
            subcats = [[s] for s in CATEGORY_MAP[category]]
            update.message.reply_text(f"'{category}' –º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –û–±–µ—Ä–∏ –æ–¥–Ω—É:", reply_markup=ReplyKeyboardMarkup(subcats, one_time_keyboard=True, resize_keyboard=True))
            return

        amount = float(state["amount"])
        if category != "–ø—Ä–∏—Ö—ñ–¥":
            amount *= -1

        spent = get_spent_in_category_this_month(category)
        limits = {row[0]: float(row[1]) for row in limits_sheet.get_all_values() if len(row) > 1}
        limit = limits.get(category)
        if limit and (spent + abs(amount)) > limit:
            limit_msg = f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç {limit} –≥—Ä–Ω —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' (–≤–∂–µ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent + abs(amount):.2f} –≥—Ä–Ω)\n"
            closing = "üò¨ –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º(-–æ—é) –∑ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏!"
        else:
            limit_msg = ""
            closing = "üí™ –ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞!"

        sheet.append_row([datetime.now().strftime("%Y-%m-%d %H:%M"), user_name, amount, category, ""])
        update.message.reply_text(f"{limit_msg}üí∏ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ {abs(amount)} –≥—Ä–Ω —É *{category}*. {closing}", parse_mode="Markdown")
        pending_state.pop(user_id)
        return

    if state.get("step") == "await_subcategory":
        amount = float(state["amount"])
        if state["category"] != "–ø—Ä–∏—Ö—ñ–¥":
            amount *= -1
        spent = get_spent_in_category_this_month(state["category"])
        limits = {row[0]: float(row[1]) for row in limits_sheet.get_all_values() if len(row) > 1}
        limit = limits.get(state["category"])
        if limit and (spent + abs(amount)) > limit:
            limit_msg = f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç {limit} –≥—Ä–Ω —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{state['category']}' (–≤–∂–µ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent + abs(amount):.2f} –≥—Ä–Ω)\n"
            closing = "üò¨ –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º(-–æ—é) –∑ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏!"
        else:
            limit_msg = ""
            closing = "üí™ –í—Å–µ –∑–∞ –ø–ª–∞–Ω–æ–º!"

        sheet.append_row([datetime.now().strftime("%Y-%m-%d %H:%M"), user_name, amount, state["category"], text])
        update.message.reply_text(f"{limit_msg}üí∏ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ {abs(amount)} –≥—Ä–Ω —É *{state['category']} > {text}*. {closing}", parse_mode="Markdown")
        pending_state.pop(user_id)
        return

    if text.replace(".", "", 1).isdigit():
        pending_state[user_id] = {"step": "await_category", "amount": text}
        keyboard = [[c] for c in CATEGORY_MAP]
        update.message.reply_text("–û–∫–µ–π, —Ç–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
        return

    update.message.reply_text("üß† –ù–∞–ø–∏—à–∏ —Å—É–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '1000'")

def report_command(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    report_state[user_id] = "waiting_for_period"
    now = datetime.now()
    keyboard = [
        ["–∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è"],
        ["–≤—ñ–¥ –ó–ü"],
        [f"–≤—ñ–¥ {now.strftime('%Y-%m-%d')}"]
    ]
    update.message.reply_text("–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –∑—Ä–æ–±–∏—Ç–∏ –∑–≤—ñ—Ç?", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))

def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ —Å—É–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '1000' –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /report")

def ping(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –Ø –Ω–∞ –∑–≤'—è–∑–∫—É!")

def main():
    updater = Updater(os.environ["BOT_TOKEN"], use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("report", report_command))
    dp.add_handler(CommandHandler("ping", ping))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
