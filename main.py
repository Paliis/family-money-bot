
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import os
import json
import gspread
import base64
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
CATEGORY_MAP = {
    "–ø—Ä–æ–¥—É–∫—Ç–∏": [],
    "–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ —Ç–æ–≤–∞—Ä–∏": [],
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏": [],
    "–∫—ñ–Ω–æ": [],
    "–∫–∞–≤'—è—Ä–Ω—è": [],
    "–∞–≤—Ç–æ": ["–∑–∞–ø—Ä–∞–≤–∫–∞", "—Ç–µ—Ö–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "–º–∏–π–∫–∞", "—Å—Ç–æ—è–Ω–∫–∞", "–ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è", "–∫—Ä–µ–¥–∏—Ç", "—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"],
    "–∫–æ—Å–º–µ—Ç–∏–∫–∞": [],
    "–∫—Ä–∞—Å–∞": [],
    "–æ–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": [],
    "–∫–æ–º—É–Ω–∞–ª–∫–∞, –º–æ–±—ñ–ª—å–Ω–∏–π, —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç": [],
    "–¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —Å–≤—è—Ç–∞": [],
    "–∑–¥–æ—Ä–æ–≤'—è": ["–±–∞–¥–∏", "–ª—ñ–∫–∞—Ä—ñ", "–ª—ñ–∫–∏", "–ø—Å–∏—Ö–æ–ª–æ–≥", "–º–∞—Å–∞–∂"],
    "—Å—Ç—Ä—ñ–ª—å–±–∞": ["–ø–∞—Ç—Ä–æ–Ω–∏", "–≤–Ω–µ—Å–∫–∏", "–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏"],
    "–Ω–∞–≤—á–∞–Ω–Ω—è": ["—à–∫–æ–ª–∞", "–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞", "—ñ–Ω—Å—Ç–∏—Ç—É—Ç", "—ñ–Ω—à–µ"],
    "—Ç–∞–∫—Å—ñ": [],
    "–¥–æ–Ω–∞—Ç–∏": [],
    "–∫–≤—ñ—Ç–∏": [],
    "–±–∞—Ç—å–∫–∞–º": [],
    "—Ç–µ—Ö–Ω—ñ–∫–∞": [],
    "–ø—Ä–∏—Ö—ñ–¥": []
}

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
google_creds_raw = base64.b64decode(os.environ["GOOGLE_CREDS_B64"]).decode("utf-8")
google_creds = json.loads(google_creds_raw)
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(os.environ["SPREADSHEET_ID"]).sheet1
limits_sheet = client.open_by_key(os.environ["SPREADSHEET_ID"]).worksheet("–õ—ñ–º—ñ—Ç–∏")

pending_state = {}  # user_id: {step, amount, category}
report_state = {}
last_salary_date = {}

def get_spent_in_category_this_month(category):
    rows = sheet.get_all_values()[1:]
    total = 0
    for row in rows:
        if len(row) < 4 or row[3] != category:
            continue
        try:
            dt = datetime.strptime(row[0], "%Y-%m-%d %H:%M")
            if dt < datetime.now().replace(day=1):
                continue
            amount = float(row[2])
            if amount < 0:
                total += abs(amount)
        except:
            continue
    return total

def send_report(update, start, end):
    rows = sheet.get_all_values()[1:]
    income = 0
    expenses = {}
    for row in rows:
        try:
            dt = datetime.strptime(row[0], "%Y-%m-%d %H:%M")
            if not (start <= dt <= end): continue
            amount = float(row[2])
            category = row[3]
            subcat = row[4] if len(row) > 4 else ""
            if category == "–ø—Ä–∏—Ö—ñ–¥":
                income += amount
            else:
                expenses.setdefault(category, {}).setdefault(subcat, 0)
                expenses[category][subcat] += amount
        except:
            continue

    result = f"üìä –ó–≤—ñ—Ç –∑ {start.strftime('%Y-%m-%d')} –ø–æ {end.strftime('%Y-%m-%d')}

"
    result += f"üí∞ –ü—Ä–∏—Ö—ñ–¥: *{income:.2f} –≥—Ä–Ω*

"
    total_exp = 0
    for cat, subcats in sorted(expenses.items(), key=lambda x: sum(x[1].values()), reverse=True):
        cat_total = sum(subcats.values())
        total_exp += abs(cat_total)
        result += f"*{cat}*: {abs(cat_total):.2f} –≥—Ä–Ω
"
        for sub, val in subcats.items():
            if sub:
                result += f"  ‚îî {sub}: {abs(val):.2f} –≥—Ä–Ω
"
        result += "
"
    balance = income + sum(sum(v.values()) for v in expenses.values())
    result += f"üìâ –ë–∞–ª–∞–Ω—Å: *{balance:.2f} –≥—Ä–Ω*"
    update.message.reply_text(result, parse_mode="Markdown")

def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    name = update.message.from_user.first_name
    text = update.message.text.lower().strip()

    if report_state.get(user_id) == "waiting_for_period":
        del report_state[user_id]
        now = datetime.now()
        if text == "–∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è":
            return send_report(update, now.replace(day=1), now)
        elif text == "–≤—ñ–¥ –∑–ø":
            if user_id in last_salary_date:
                return send_report(update, last_salary_date[user_id], now)
            update.message.reply_text("‚ùå –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ó–ü –Ω–µ–≤—ñ–¥–æ–º–∞. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è /salary")
            return
        elif text.startswith("–≤—ñ–¥ "):
            try:
                dt = datetime.strptime(text.replace("–≤—ñ–¥ ", ""), "%Y-%m-%d")
                return send_report(update, dt, now)
            except:
                update.message.reply_text("üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: –≤—ñ–¥ 2025-04-01")
                return

    state = pending_state.get(user_id, {})
    if state.get("step") == "await_category":
        cat = text
        if cat not in CATEGORY_MAP:
            keyboard = [[c] for c in CATEGORY_MAP.keys()]
            update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))
            return
        if CATEGORY_MAP[cat]:
            pending_state[user_id] = {"step": "await_subcategory", "amount": state["amount"], "category": cat}
            subs = [[s] for s in CATEGORY_MAP[cat]]
            update.message.reply_text(f"'{cat}' –º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –û–±–µ—Ä–∏:", reply_markup=ReplyKeyboardMarkup(subs, resize_keyboard=True, one_time_keyboard=True))
            return
        return save_transaction(update, name, float(state["amount"]), cat, "", user_id)

    if state.get("step") == "await_subcategory":
        return save_transaction(update, name, float(state["amount"]), state["category"], text, user_id)

    if text.replace(".", "", 1).isdigit():
        pending_state[user_id] = {"step": "await_category", "amount": text}
        keyboard = [[c] for c in CATEGORY_MAP.keys()]
        update.message.reply_text("–û–∫–µ–π, —Ç–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))
        return

    update.message.reply_text("üß† –ù–∞–ø–∏—à–∏ —Å—É–º—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É")

def save_transaction(update, user_name, amount, category, subcat, user_id):
    is_income = category == "–ø—Ä–∏—Ö—ñ–¥"
    value = amount if is_income else -amount
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    spent = get_spent_in_category_this_month(category)
    limits = {row[0]: float(row[1]) for row in limits_sheet.get_all_values() if len(row) >= 2}
    limit = limits.get(category)
    limit_msg, closing = "", "üí™ –ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞!"

    if limit and not is_income and (spent + abs(value)) > limit:
        limit_msg = f"‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç {limit} –≥—Ä–Ω —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' (–≤–∂–µ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent + abs(value):.2f} –≥—Ä–Ω)
"
        closing = "üò¨ –ë—É–¥—å —É–≤–∞–∂–Ω–∏–º(-–æ—é) –∑ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏!"

    sheet.append_row([now, user_name, value, category, subcat])
    pending_state.pop(user_id, None)

    if is_income:
        last_salary_date[user_id] = datetime.now()

    suffix = f"*{category}*" if not subcat else f"*{category} > {subcat}*"
    update.message.reply_text(f"{limit_msg}üí∏ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞–≤ {abs(value)} –≥—Ä–Ω —É {suffix}. {closing}", parse_mode="Markdown")

def report(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    report_state[user_id] = "waiting_for_period"
    now = datetime.now().strftime("%Y-%m-%d")
    keyboard = [["–∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è"], ["–≤—ñ–¥ –ó–ü"], [f"–≤—ñ–¥ {now}"]]
    update.message.reply_text("–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –∑—Ä–æ–±–∏—Ç–∏ –∑–≤—ñ—Ç?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))

def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ —Å—É–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '1000' –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /report")

def ping(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –Ø –Ω–∞ –∑–≤'—è–∑–∫—É!")

def salary(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    pending_state[user_id] = {"step": "await_category", "amount": "0"}
    update.message.reply_text("üíº –í–≤–µ–¥–∏ —Å—É–º—É –ó–ü (–∑–∞–ø–∏—à–µ–º–æ —è–∫ –ø—Ä–∏—Ö—ñ–¥):")

def setlimit(update: Update, context: CallbackContext):
    try:
        parts = update.message.text.split(" ", 2)
        category, value = parts[1], float(parts[2])
        limits_sheet.append_row([category, value])
        update.message.reply_text(f"‚úÖ –õ—ñ–º—ñ—Ç {value} –≥—Ä–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'")
    except:
        update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /setlimit <–∫–∞—Ç–µ–≥–æ—Ä—ñ—è> <—Å—É–º–∞>")

def main():
    updater = Updater(os.environ["BOT_TOKEN"], use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("ping", ping))
    dp.add_handler(CommandHandler("report", report))
    dp.add_handler(CommandHandler("salary", salary))
    dp.add_handler(CommandHandler("setlimit", setlimit))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
